package Baekjoon;

import java.util.Scanner;

// 0보다 크거나 같고, 99보다 작거나 같은 정수가 주어질 때 다음과 같은 연산을 할 수 있다. 먼저 주어진 수가 10보다 작다면 앞에 0을 붙여 두 자리 수로 만들고, 각 자리의 숫자를 더한다. 그 다음, 주어진 수의 가장 오른쪽 자리 수와 앞에서 구한 합의 가장 오른쪽 자리 수를 이어 붙이면 새로운 수를 만들 수 있다. 다음 예를 보자.

// 26부터 시작한다. 2+6 = 8이다. 새로운 수는 68이다. 6+8 = 14이다. 새로운 수는 84이다. 8+4 = 12이다. 새로운 수는 42이다. 4+2 = 6이다. 새로운 수는 26이다.

// 위의 예는 4번만에 원래 수로 돌아올 수 있다. 따라서 26의 사이클의 길이는 4이다.

// N이 주어졌을 때, N의 사이클의 길이를 구하는 프로그램을 작성하시오. 

/**
 * 첫째 줄에 N이 주어진다. N은 0보다 크거나 같고, 99보다 작거나 같은 정수이다.
 * 첫째 줄에 N의 사이클 길이를 출력한다.
 */

public class Main {
	public static void main(String[] args) {
		Scanner sc= new Scanner(System.in);
		int num = sc.nextInt(); // 입력받은 정수 num 
		int cnt = 1; // 사이클의 길이 
		int chk = num; // 입력받은 정수 num을 다시 돌아오는 원래 정수 chk로 선언한다. 
		while(true) { // while문을 통해 사이클이 나올때 까지 반복해서 루프를 돈다. 
			int a =  num/10;  // 10의 자리를 구분하기 위해 사용
			int b =  num%10;  // 1의 자리를 구분하기 위해 사용 
			int c= 	 a + b; // 위에서 구한 각각 10의자리(a)와 1의자리(b)를 더한 c
			num= b*10 + c%10;
						/*	접근방법 :  어떤 수 (X), 십의 자리 수와 일의 자리 수를 더한 수 (Y), X의 일의자리 * 10 +Y % 10을 가진수 (Z)
						 * 	ex) 26(X) -> 2+6 = 08(Y) -> 6 * 10 + 8 % 10 = 68
						 * 	문제를 풀기 위해서는 10의 자리와 1의 자리를 구분할 필요가 있다. 
						 */
			if(num==chk) // 입력받은 정수 num과 다시 반복 루프해서 돌아오는 chk가 같아지면 반복문을 빠져나간다.
				break;
			else {
				cnt++; // 그렇지 않으면 사이클의 길이를 더해준다. 
			}
		}
		System.out.println(cnt); // 찾고있는것은 숫자를 입력했을 때의 사이클을 찾는 것이므로 cnt(사이클)을 출력한다. 
	}
}
