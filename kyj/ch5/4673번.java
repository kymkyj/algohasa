package Baekjoon;

/*
셀프 넘버는 1949년 인도 수학자 D.R. Kaprekar가 이름 붙였다. 양의 정수 n에 대해서 d(n)을 n과 n의 각 자리수를 더하는 함수라고 정의하자.
 예를 들어, d(75) = 75+7+5 = 87이다.

양의 정수 n이 주어졌을 때, 이 수를 시작해서 n, d(n), d(d(n)), d(d(d(n))), ...과 같은 무한 수열을 만들 수 있다. 

예를 들어, 33으로 시작한다면 다음 수는 33 + 3 + 3 = 39이고, 그 다음 수는 39 + 3 + 9 = 51, 다음 수는 51 + 5 + 1 = 57이다. 이런식으로 다음과 같은 수열을 만들 수 있다.

33, 39, 51, 57, 69, 84, 96, 111, 114, 120, 123, 129, 141, ...

n을 d(n)의 생성자라고 한다. 위의 수열에서 33은 39의 생성자이고, 39는 51의 생성자, 51은 57의 생성자이다. 생성자가 한 개보다 많은 경우도 있다. 

예를 들어, 101은 생성자가 2개(91과 100) 있다. 

생성자가 없는 숫자를 셀프 넘버라고 한다. 100보다 작은 셀프 넘버는 총 13개가 있다. 1, 3, 5, 7, 9, 20, 31, 42, 53, 64, 75, 86, 97

10000보다 작거나 같은 셀프 넘버를 한 줄에 하나씩 출력하는 프로그램을 작성하시오.
 */

/**
 * 입력은 없다.
 * 10,000보다 작거나 같은 셀프 넘버를 한 줄에 하나씩 증가하는 순서로 출력한다.
 */


/** 접근 방법:
 * 
 *  셀프넘버를 직접 구하는 방법으로 찾으면 문제가 매우 어려워 지기 때문에
 *  반대로 셀프넘버가 아닌 수를 찾아 !을 이용해 찾으면 쉬워진다.  
 * 
 *  n -> d(n)을 찾는 방식으로 찾습니다.
 *  
 *  1) n으로 d(n)을 찾는 함수(getDn)를 만들고, n을 1부터 10000까지 반복하면서 d(n)을 찾았습니다.

	2) 크기가 10001인 배열(isNotSelfNumber)을 만들고, d(n)이 되는 숫자가 셀프 넘버가 아니라고(true) 체크하였습니다.

	3) 반복을 마친 후 배열에 체크되지 않은(false) 셀프 넘버를 출력하였습니다.

예를 들어

n = 1 이면 d(n) = 1 + 1 = 2 이고, 이 결과로 2는 셀프 넘버가 아닙니다. (배열의 2번 index에 체크)

n = 2 이면 d(n) = 2 + 2 = 4 이고, 이 결과로 4는 셀프 넘버가 아닙니다. (배열의 4번 index에 체크)

...

n = 10000 이면 d(n) = 10000 + 1 + 0 + 0 + 0 + 0 = 10001 이고, 이 결과로 10001은 셀프 넘버가 아닙니다. (배열 범위를 초과하여 체크 X)

이런식으로 반복한 후에 체크되지 않은 숫자(셀프 넘버)를 모두 출력해주었습니다.

 */
public class Main {
	public static void main(String[] args) {
        boolean[] isNotSelfNumber = new boolean[10001]; // 크기가 10001인 boolean 형태의 배열을 선언해 준다.
         
        for (int i = 1; i <= 10000; ++i) {		
            int dn = getDn(i);
            if (dn <= 10000) {			// 설정을 해주지 않으면 값을 초과하기 때문에 범위를 지정해준다. 				
                isNotSelfNumber[dn] = true;   // 생성자를 가지는 경우 true를 반환한다           
            }									
        }
        
     // 셀프넘버의 조건을 만족하는 값 getDn()을 dn에 할당
     // 생성자를 가지는 경우 true  셀프넘버인 경우 false를 반환 
        
        
        for (int i = 1; i < isNotSelfNumber.length; ++i) {
            if (!isNotSelfNumber[i]) {
                System.out.println(i);              
            }
        }
    }
	
	// 처음에 선언해주었던 배열의 크기 만큼 배열을 반복문을 돈다. 
	// 조건식 !isNotSelfNumber[i]는 셀프넘버
     
    private static int getDn(int n) { // n으로 d(n)을 찾는 함수 getDn()을 만들어준다. 
        int dn = n;	
        while(n > 0) { 
            dn += n % 10;
            n /= 10;
        }
        return dn;
    }
 
}

